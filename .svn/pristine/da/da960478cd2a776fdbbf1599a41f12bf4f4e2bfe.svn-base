// pages/mall/mall-my-collect/collect.js
let util = require('../../../utils/util.js');
const app = getApp()
Page({

  /**
   * 页面的初始数据
   */
  data: {
    tabList:[
      { id: 'pro', title: '商品' },
      {id:'store',title:'店铺'}
    ],
    pageType:'pro',
    proList: [],//收藏商品列表
    storeList:[],
    filterData:{
      collectType:'2',
      pageNum:1,
      pageSize: 10,
    },
    hasNextPage:true
  },
  bindTabChange(e){
    let pageType = e.detail.type
    console.log(e)
    let scrollTop=0
    let filterData=this.data.filterData
    filterData.pageNum=1
    if (pageType === 'pro') {
      filterData.collectType='2'
      this.getCollectList(filterData,'refresh')
    }
    if(pageType==='store'){
      filterData.collectType = '1'
      this.getCollectList(filterData, 'refresh')
    }
    this.setData({ pageType, filterData, scrollTop })
  },
  //查看商品详情
  seeProDetail(e) {
    let index = parseInt(e.detail.currentTarget.dataset.index)
    let list = this.data.proList
    let id = list[index].keyId
    wx.navigateTo({
      url: '/pages/mall/pro-details/detail?id=' + id + '&actType=detail'
    })
  },
 
  //获取收藏列表
  ///org/collect/myList
  //collectType/收藏类型(1:店铺,2:商品)
  getCollectList(data,actType){
    let url = app.globalData.baseUrl + 'apiUser/org/collect/myList'
    util.getRequestListData(url, data, actType, this.getCollectListRes)
  },
  getCollectListRes(res,actType){
    console.log(res)
    if(res.data.code==='200'){
      let content = res.data.content
      let list=content.list
      let hasNextPage=content.hasNextPage
      if (this.data.pageType === 'pro') {
        if (actType === 'refresh') {
          console.log(list)
          this.setData({
            proList: list,
            hasNextPage
          })
        }
        if (actType === 'reachBottom') {
          let proList = this.data.proList
          list.forEach(item => {
            proList.push(item)
          })
          this.setData({ proList, hasNextPage })
        }
      }
      if (this.data.pageType === 'store') {
        if (actType === 'refresh') {
          console.log(list)
          this.setData({
            storeList: list,
            hasNextPage
          })
        }
        if (actType === 'reachBottom') {
          let storeList = this.data.storeList
          list.forEach(item => {
            storeList.push(item)
          })
          this.setData({ storeList, hasNextPage })
        }
      }
    }
  },
  /**
   * 生命周期函数--监听页面加载
   */
  onLoad: function (options) {
    this.getCollectList(this.data.filterData,'refresh')
  },

  /**
   * 生命周期函数--监听页面初次渲染完成
   */
  onReady: function () {

  },

  /**
   * 生命周期函数--监听页面显示
   */
  onShow: function () {
    
  },

  /**
   * 生命周期函数--监听页面隐藏
   */
  onHide: function () {

  },

  /**
   * 生命周期函数--监听页面卸载
   */
  onUnload: function () {

  },

  /**
   * 页面相关事件处理函数--监听用户下拉动作
   */
  onPullDownRefresh: function () {

  },

  /**
   * 页面上拉触底事件的处理函数
   */
  onReachBottom: function () {

  },

  /**
   * 用户点击右上角分享
   */
  onShareAppMessage: function () {

  }
})